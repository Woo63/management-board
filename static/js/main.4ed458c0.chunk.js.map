{"version":3,"sources":["components/Ticket/Ticket.js","components/Table/Table.js","containers/Board.js","components/Header/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["TicketWrapper","styled","div","Title","h4","Body","p","Ticket","title","body","TableWrapper","Alert","Table","loading","error","tickets","map","item","BoardWrapper","Board","state","data","fetch","json","ticketsJSON","this","setState","message","id","key","filter","ticket","lane","Component","HeaderWrapper","Header","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ed458c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TicketWrapper=styled.div`\r\n    border-top: 1px solid #9b9d9e;\r\n    padding: 20px;    \r\n    text-align: left;\r\n    &:not(:last-child) {\r\n        margin-bottom: 5%;\r\n    }\r\n`;\r\nconst Title=styled.h4`\r\n    text-align: center;    \r\n    padding:2%;\r\n`;\r\nconst Body=styled.p`\r\n    // width: 100%;\r\n`;\r\nconst Ticket=({title, body})=>{\r\n    return(\r\n        <TicketWrapper>\r\n            <Title>{title}</Title>\r\n            <Body>{body}</Body>\r\n        </TicketWrapper>\r\n    )\r\n}\r\n\r\nexport default Ticket;","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Ticket from \"../Ticket/Ticket\";\r\n\r\nconst TableWrapper=styled.div`\r\n    background: linear-gradient(to top left, powderblue, pink);      \r\n    padding-top:15px;\r\n    border-radius: 10px;\r\n    padding:10px;\r\n    box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\r\n    min-height: 50vh;\r\n    width: 20vw;\r\n    \r\n    @media (max-width: 768px) {\r\n        margin-bottom: 5%;\r\n    }\r\n    \r\n`;\r\n\r\nconst Alert=styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst Table=({loading, error, title, tickets})=>{\r\n    return(\r\n        <TableWrapper>\r\n            <p>{title}</p>\r\n            {(loading || error) && <Alert>{loading ? 'Loading...' : error}</Alert>}\r\n            {tickets.map(item=>(\r\n                <Ticket title={item.title} body={item.body}/>\r\n            ))}\r\n        </TableWrapper>\r\n    )\r\n};\r\n\r\nexport default Table;\r\n\r\n","import React, {Component} from \"react\";\r\nimport styled from 'styled-components';\r\nimport Table from \"../components/Table/Table\";\r\n\r\nconst BoardWrapper=styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content: space-between;\r\n    margin:20px 0px 30px;\r\n    flex-wrap:wrap;\r\n    padding:0 15px;\r\n`;\r\n\r\nclass Board extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n            error: '',\r\n            }\r\n        }\r\n    async componentDidMount() {\r\n        try {\r\n            const tickets = await fetch('../../assets/data.json');\r\n            const ticketsJSON = await tickets.json();\r\n            if (ticketsJSON) {\r\n                this.setState({\r\n                    data: ticketsJSON,\r\n                    loading: false,\r\n                });\r\n            }\r\n        } catch(error) {\r\n            this.setState({\r\n                loading: false,\r\n                error: error.message,\r\n            });\r\n        }\r\n    }\r\n    render(){\r\n        const { data, loading, error } = this.state;\r\n        const tables=[\r\n            {id:1,title:'TO DO'},\r\n            {id:2,title:'ACTIVE'},\r\n            {id:3,title:'REVIEW'},\r\n            {id:4,title:'DONE'}\r\n        ]\r\n        return(\r\n            <BoardWrapper>\r\n                {\r\n                    tables.map(item=>(\r\n                        <Table\r\n                            key={item.id}\r\n                            title={item.title}\r\n                            loading={loading}\r\n                            error={error}\r\n                            tickets={data.filter(ticket => ticket.lane === item.id)}\r\n                        />\r\n                    ))\r\n                }\r\n            </BoardWrapper>\r\n\r\n        )\r\n    }\r\n};\r\n\r\nexport default Board;","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderWrapper=styled.p`\r\n    color: white;\r\n    background-color: #71babf;\r\n    font-size: calc(10px + 3vmin);\r\n    height:64px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    letter-spacing: 5px;\r\n    text-shadow: 0 2px 2px rgba(0,0,0,0.25), 0 1px 1px rgba(0,0,0,0.22);\r\n`;\r\n\r\nconst Header = ({title}) => {\r\n    return(\r\n        <HeaderWrapper>\r\n            {title}\r\n        </HeaderWrapper>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Board from \"./Board\";\nimport Header from \"../components/Header/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header title={'Project Management Board'}/>\n        <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}